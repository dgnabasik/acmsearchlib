// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: timeevent.proto

package timeevent

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"

	context "context"

	api "github.com/micro/go-micro/v2/api"

	client "github.com/micro/go-micro/v2/client"

	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TimeEventService service

func NewTimeEventServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TimeEventService service

type TimeEventService interface {
	CreateDay(ctx context.Context, in *TimeEventRequest, opts ...client.CallOption) (*TimeEventResponse, error)
	CreateWeek(ctx context.Context, in *TimeEventRequest, opts ...client.CallOption) (*TimeEventResponse, error)
	CreateMonth(ctx context.Context, in *TimeEventRequest, opts ...client.CallOption) (*TimeEventResponse, error)
	CreateQuarter(ctx context.Context, in *TimeEventRequest, opts ...client.CallOption) (*TimeEventResponse, error)
	CreateYear(ctx context.Context, in *TimeEventRequest, opts ...client.CallOption) (*TimeEventResponse, error)
	CreateSpan(ctx context.Context, in *TimeEventRequest, opts ...client.CallOption) (*TimeEventResponse, error)
	RecordEvent(ctx context.Context, in *TimeEventRequest, opts ...client.CallOption) (*TimeEventResponse, error)
	GetTimeEvents(ctx context.Context, in *GetTimeEventRequest, opts ...client.CallOption) (*GetTimeEventResponse, error)
}

type timeEventService struct {
	c    client.Client
	name string
}

func NewTimeEventService(name string, c client.Client) TimeEventService {
	return &timeEventService{
		c:    c,
		name: name,
	}
}

func (c *timeEventService) CreateDay(ctx context.Context, in *TimeEventRequest, opts ...client.CallOption) (*TimeEventResponse, error) {
	req := c.c.NewRequest(c.name, "TimeEventService.CreateDay", in)
	out := new(TimeEventResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeEventService) CreateWeek(ctx context.Context, in *TimeEventRequest, opts ...client.CallOption) (*TimeEventResponse, error) {
	req := c.c.NewRequest(c.name, "TimeEventService.CreateWeek", in)
	out := new(TimeEventResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeEventService) CreateMonth(ctx context.Context, in *TimeEventRequest, opts ...client.CallOption) (*TimeEventResponse, error) {
	req := c.c.NewRequest(c.name, "TimeEventService.CreateMonth", in)
	out := new(TimeEventResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeEventService) CreateQuarter(ctx context.Context, in *TimeEventRequest, opts ...client.CallOption) (*TimeEventResponse, error) {
	req := c.c.NewRequest(c.name, "TimeEventService.CreateQuarter", in)
	out := new(TimeEventResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeEventService) CreateYear(ctx context.Context, in *TimeEventRequest, opts ...client.CallOption) (*TimeEventResponse, error) {
	req := c.c.NewRequest(c.name, "TimeEventService.CreateYear", in)
	out := new(TimeEventResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeEventService) CreateSpan(ctx context.Context, in *TimeEventRequest, opts ...client.CallOption) (*TimeEventResponse, error) {
	req := c.c.NewRequest(c.name, "TimeEventService.CreateSpan", in)
	out := new(TimeEventResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeEventService) RecordEvent(ctx context.Context, in *TimeEventRequest, opts ...client.CallOption) (*TimeEventResponse, error) {
	req := c.c.NewRequest(c.name, "TimeEventService.RecordEvent", in)
	out := new(TimeEventResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeEventService) GetTimeEvents(ctx context.Context, in *GetTimeEventRequest, opts ...client.CallOption) (*GetTimeEventResponse, error) {
	req := c.c.NewRequest(c.name, "TimeEventService.GetTimeEvents", in)
	out := new(GetTimeEventResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TimeEventService service

type TimeEventServiceHandler interface {
	CreateDay(context.Context, *TimeEventRequest, *TimeEventResponse) error
	CreateWeek(context.Context, *TimeEventRequest, *TimeEventResponse) error
	CreateMonth(context.Context, *TimeEventRequest, *TimeEventResponse) error
	CreateQuarter(context.Context, *TimeEventRequest, *TimeEventResponse) error
	CreateYear(context.Context, *TimeEventRequest, *TimeEventResponse) error
	CreateSpan(context.Context, *TimeEventRequest, *TimeEventResponse) error
	RecordEvent(context.Context, *TimeEventRequest, *TimeEventResponse) error
	GetTimeEvents(context.Context, *GetTimeEventRequest, *GetTimeEventResponse) error
}

func RegisterTimeEventServiceHandler(s server.Server, hdlr TimeEventServiceHandler, opts ...server.HandlerOption) error {
	type timeEventService interface {
		CreateDay(ctx context.Context, in *TimeEventRequest, out *TimeEventResponse) error
		CreateWeek(ctx context.Context, in *TimeEventRequest, out *TimeEventResponse) error
		CreateMonth(ctx context.Context, in *TimeEventRequest, out *TimeEventResponse) error
		CreateQuarter(ctx context.Context, in *TimeEventRequest, out *TimeEventResponse) error
		CreateYear(ctx context.Context, in *TimeEventRequest, out *TimeEventResponse) error
		CreateSpan(ctx context.Context, in *TimeEventRequest, out *TimeEventResponse) error
		RecordEvent(ctx context.Context, in *TimeEventRequest, out *TimeEventResponse) error
		GetTimeEvents(ctx context.Context, in *GetTimeEventRequest, out *GetTimeEventResponse) error
	}
	type TimeEventService struct {
		timeEventService
	}
	h := &timeEventServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TimeEventService{h}, opts...))
}

type timeEventServiceHandler struct {
	TimeEventServiceHandler
}

func (h *timeEventServiceHandler) CreateDay(ctx context.Context, in *TimeEventRequest, out *TimeEventResponse) error {
	return h.TimeEventServiceHandler.CreateDay(ctx, in, out)
}

func (h *timeEventServiceHandler) CreateWeek(ctx context.Context, in *TimeEventRequest, out *TimeEventResponse) error {
	return h.TimeEventServiceHandler.CreateWeek(ctx, in, out)
}

func (h *timeEventServiceHandler) CreateMonth(ctx context.Context, in *TimeEventRequest, out *TimeEventResponse) error {
	return h.TimeEventServiceHandler.CreateMonth(ctx, in, out)
}

func (h *timeEventServiceHandler) CreateQuarter(ctx context.Context, in *TimeEventRequest, out *TimeEventResponse) error {
	return h.TimeEventServiceHandler.CreateQuarter(ctx, in, out)
}

func (h *timeEventServiceHandler) CreateYear(ctx context.Context, in *TimeEventRequest, out *TimeEventResponse) error {
	return h.TimeEventServiceHandler.CreateYear(ctx, in, out)
}

func (h *timeEventServiceHandler) CreateSpan(ctx context.Context, in *TimeEventRequest, out *TimeEventResponse) error {
	return h.TimeEventServiceHandler.CreateSpan(ctx, in, out)
}

func (h *timeEventServiceHandler) RecordEvent(ctx context.Context, in *TimeEventRequest, out *TimeEventResponse) error {
	return h.TimeEventServiceHandler.RecordEvent(ctx, in, out)
}

func (h *timeEventServiceHandler) GetTimeEvents(ctx context.Context, in *GetTimeEventRequest, out *GetTimeEventResponse) error {
	return h.TimeEventServiceHandler.GetTimeEvents(ctx, in, out)
}

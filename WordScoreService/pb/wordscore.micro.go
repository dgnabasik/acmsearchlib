// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: wordscore.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for WordScoreService service

type WordScoreService interface {
	GetWordScore(ctx context.Context, in *GetWordScoreRequest, opts ...client.CallOption) (*GetWordScoreResponse, error)
	CreateWordScore(ctx context.Context, in *CreateWordScoreRequest, opts ...client.CallOption) (*CreateWordScoreResponse, error)
}

type wordScoreService struct {
	c    client.Client
	name string
}

func NewWordScoreService(name string, c client.Client) WordScoreService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "pb"
	}
	return &wordScoreService{
		c:    c,
		name: name,
	}
}

func (c *wordScoreService) GetWordScore(ctx context.Context, in *GetWordScoreRequest, opts ...client.CallOption) (*GetWordScoreResponse, error) {
	req := c.c.NewRequest(c.name, "WordScoreService.GetWordScore", in)
	out := new(GetWordScoreResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordScoreService) CreateWordScore(ctx context.Context, in *CreateWordScoreRequest, opts ...client.CallOption) (*CreateWordScoreResponse, error) {
	req := c.c.NewRequest(c.name, "WordScoreService.CreateWordScore", in)
	out := new(CreateWordScoreResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WordScoreService service

type WordScoreServiceHandler interface {
	GetWordScore(context.Context, *GetWordScoreRequest, *GetWordScoreResponse) error
	CreateWordScore(context.Context, *CreateWordScoreRequest, *CreateWordScoreResponse) error
}

func RegisterWordScoreServiceHandler(s server.Server, hdlr WordScoreServiceHandler, opts ...server.HandlerOption) error {
	type wordScoreService interface {
		GetWordScore(ctx context.Context, in *GetWordScoreRequest, out *GetWordScoreResponse) error
		CreateWordScore(ctx context.Context, in *CreateWordScoreRequest, out *CreateWordScoreResponse) error
	}
	type WordScoreService struct {
		wordScoreService
	}
	h := &wordScoreServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&WordScoreService{h}, opts...))
}

type wordScoreServiceHandler struct {
	WordScoreServiceHandler
}

func (h *wordScoreServiceHandler) GetWordScore(ctx context.Context, in *GetWordScoreRequest, out *GetWordScoreResponse) error {
	return h.WordScoreServiceHandler.GetWordScore(ctx, in, out)
}

func (h *wordScoreServiceHandler) CreateWordScore(ctx context.Context, in *CreateWordScoreRequest, out *CreateWordScoreResponse) error {
	return h.WordScoreServiceHandler.CreateWordScore(ctx, in, out)
}
